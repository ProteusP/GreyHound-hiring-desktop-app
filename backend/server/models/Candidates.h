/**
 *
 *  Candidates.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace default_db
{

class Candidates
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _name;
        static const std::string _surname;
        static const std::string _email;
        static const std::string _phone_num;
        static const std::string _resume;
        static const std::string _place_of_study;
        static const std::string _faculty_of_educ;
        static const std::string _graduation_year;
        static const std::string _photo;
        static const std::string _about;
        static const std::string _place;
        static const std::string _search_status_id;
        static const std::string _educ_status_id;
        static const std::string _experience_status_id;
        static const std::string _work_schedule_status_id;
        static const std::string _search_status;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Candidates(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Candidates(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Candidates(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Candidates() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column surname  */
    ///Get the value of the column surname, returns the default value if the column is null
    const std::string &getValueOfSurname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSurname() const noexcept;
    ///Set the value of the column surname
    void setSurname(const std::string &pSurname) noexcept;
    void setSurname(std::string &&pSurname) noexcept;

    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;

    /**  For column phone_num  */
    ///Get the value of the column phone_num, returns the default value if the column is null
    const std::string &getValueOfPhoneNum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhoneNum() const noexcept;
    ///Set the value of the column phone_num
    void setPhoneNum(const std::string &pPhoneNum) noexcept;
    void setPhoneNum(std::string &&pPhoneNum) noexcept;
    void setPhoneNumToNull() noexcept;

    /**  For column resume  */
    ///Get the value of the column resume, returns the default value if the column is null
    const std::string &getValueOfResume() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getResume() const noexcept;
    ///Set the value of the column resume
    void setResume(const std::string &pResume) noexcept;
    void setResume(std::string &&pResume) noexcept;
    void setResumeToNull() noexcept;

    /**  For column place_of_study  */
    ///Get the value of the column place_of_study, returns the default value if the column is null
    const std::string &getValueOfPlaceOfStudy() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlaceOfStudy() const noexcept;
    ///Set the value of the column place_of_study
    void setPlaceOfStudy(const std::string &pPlaceOfStudy) noexcept;
    void setPlaceOfStudy(std::string &&pPlaceOfStudy) noexcept;
    void setPlaceOfStudyToNull() noexcept;

    /**  For column faculty_of_educ  */
    ///Get the value of the column faculty_of_educ, returns the default value if the column is null
    const std::string &getValueOfFacultyOfEduc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFacultyOfEduc() const noexcept;
    ///Set the value of the column faculty_of_educ
    void setFacultyOfEduc(const std::string &pFacultyOfEduc) noexcept;
    void setFacultyOfEduc(std::string &&pFacultyOfEduc) noexcept;
    void setFacultyOfEducToNull() noexcept;

    /**  For column graduation_year  */
    ///Get the value of the column graduation_year, returns the default value if the column is null
    const int32_t &getValueOfGraduationYear() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getGraduationYear() const noexcept;
    ///Set the value of the column graduation_year
    void setGraduationYear(const int32_t &pGraduationYear) noexcept;
    void setGraduationYearToNull() noexcept;

    /**  For column photo  */
    ///Get the value of the column photo, returns the default value if the column is null
    const std::string &getValueOfPhoto() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhoto() const noexcept;
    ///Set the value of the column photo
    void setPhoto(const std::string &pPhoto) noexcept;
    void setPhoto(std::string &&pPhoto) noexcept;
    void setPhotoToNull() noexcept;

    /**  For column about  */
    ///Get the value of the column about, returns the default value if the column is null
    const std::string &getValueOfAbout() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAbout() const noexcept;
    ///Set the value of the column about
    void setAbout(const std::string &pAbout) noexcept;
    void setAbout(std::string &&pAbout) noexcept;
    void setAboutToNull() noexcept;

    /**  For column place  */
    ///Get the value of the column place, returns the default value if the column is null
    const std::string &getValueOfPlace() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlace() const noexcept;
    ///Set the value of the column place
    void setPlace(const std::string &pPlace) noexcept;
    void setPlace(std::string &&pPlace) noexcept;
    void setPlaceToNull() noexcept;

    /**  For column search_status_id  */
    ///Get the value of the column search_status_id, returns the default value if the column is null
    const int32_t &getValueOfSearchStatusId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSearchStatusId() const noexcept;
    ///Set the value of the column search_status_id
    void setSearchStatusId(const int32_t &pSearchStatusId) noexcept;
    void setSearchStatusIdToNull() noexcept;

    /**  For column educ_status_id  */
    ///Get the value of the column educ_status_id, returns the default value if the column is null
    const int32_t &getValueOfEducStatusId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getEducStatusId() const noexcept;
    ///Set the value of the column educ_status_id
    void setEducStatusId(const int32_t &pEducStatusId) noexcept;
    void setEducStatusIdToNull() noexcept;

    /**  For column experience_status_id  */
    ///Get the value of the column experience_status_id, returns the default value if the column is null
    const int32_t &getValueOfExperienceStatusId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExperienceStatusId() const noexcept;
    ///Set the value of the column experience_status_id
    void setExperienceStatusId(const int32_t &pExperienceStatusId) noexcept;
    void setExperienceStatusIdToNull() noexcept;

    /**  For column work_schedule_status_id  */
    ///Get the value of the column work_schedule_status_id, returns the default value if the column is null
    const int32_t &getValueOfWorkScheduleStatusId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getWorkScheduleStatusId() const noexcept;
    ///Set the value of the column work_schedule_status_id
    void setWorkScheduleStatusId(const int32_t &pWorkScheduleStatusId) noexcept;
    void setWorkScheduleStatusIdToNull() noexcept;

    /**  For column search_status  */
    ///Get the value of the column search_status, returns the default value if the column is null
    const std::string &getValueOfSearchStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSearchStatus() const noexcept;
    ///Set the value of the column search_status
    void setSearchStatus(const std::string &pSearchStatus) noexcept;
    void setSearchStatus(std::string &&pSearchStatus) noexcept;
    void setSearchStatusToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 17;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Candidates>;
    friend drogon::orm::BaseBuilder<Candidates, true, true>;
    friend drogon::orm::BaseBuilder<Candidates, true, false>;
    friend drogon::orm::BaseBuilder<Candidates, false, true>;
    friend drogon::orm::BaseBuilder<Candidates, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Candidates>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> surname_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> phoneNum_;
    std::shared_ptr<std::string> resume_;
    std::shared_ptr<std::string> placeOfStudy_;
    std::shared_ptr<std::string> facultyOfEduc_;
    std::shared_ptr<int32_t> graduationYear_;
    std::shared_ptr<std::string> photo_;
    std::shared_ptr<std::string> about_;
    std::shared_ptr<std::string> place_;
    std::shared_ptr<int32_t> searchStatusId_;
    std::shared_ptr<int32_t> educStatusId_;
    std::shared_ptr<int32_t> experienceStatusId_;
    std::shared_ptr<int32_t> workScheduleStatusId_;
    std::shared_ptr<std::string> searchStatus_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[17]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "surname,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "phone_num,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "resume,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "place_of_study,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "faculty_of_educ,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "graduation_year,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "photo,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "about,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "place,";
            ++parametersCount;
        }
        sql += "search_status_id,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "educ_status_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "experience_status_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "work_schedule_status_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "search_status,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace default_db
} // namespace drogon_model
